services:
  app:
    container_name: yorzstudio-app-container
    build:
      context: .
      dockerfile: Dockerfile
    image: yorzstudio-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    # depends_on:
    #   db:
    #     condition: service_healthy
    #   minio:
    #     condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
#   minio:
#     container_name: yorzstudio-minio-container
#     image: minio/minio:latest
#     restart: unless-stopped
#     environment:
#       MINIO_ROOT_USER: '${MINIO_ROOT_USER}'
#       MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD}'
#     volumes:
#       - minio-data:/data
#     ports:
#       - '9000:9000'
#       - '9001:9001'
#     command: ['server', '--console-address', ':9001', '/data']
#     healthcheck:
#       test: ['CMD-SHELL', 'wget --spider -q http://127.0.0.1:9000/minio/health/live || exit 1']
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   db:
#     container_name: yorzstudio-db-container
#     image: postgres:15-alpine
#     restart: unless-stopped
#     ports:
#       - '5432:5432'
#     environment:
#       POSTGRES_USER: '${POSTGRES_USER}'
#       POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
#       POSTGRES_DB: '${POSTGRES_DB}'
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   adminer:
#     container_name: yorzstudio-adminer-container
#     image: adminer:latest
#     restart: unless-stopped
#     ports:
#       - '8080:8080'

# volumes:
#   minio-data:
#   postgres-data:
