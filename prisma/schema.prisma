generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  email         String
  emailVerified Boolean
  image         String?

  sessions Session[]
  accounts Account[]

  files       StorageFile[]
  sharedFiles StorageFile[] @relation("file_shared_with")

  ordersClient Order[] @relation("client")
  ordersWorker Order[] @relation("worker")

  orderFeedbacks    OrderStepFeedback[]
  portfolioLikes    PortfolioItemLike[]
  portfolioComments PortfolioItemComment[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model StorageFile {
  id String @id @default(cuid())

  path           String  @unique
  publicUrl      String? @unique
  bucket         String
  fileName       String
  size           Int
  type           String
  totalDownloads Int     @default(0)

  uploadedAt DateTime  @default(now())
  expiresAt  DateTime?

  isPublic    Boolean @default(true)
  label       String?
  description String?
  metadata    Json?

  portfolioItem      PortfolioItem[]
  portfolioCategory  PortfolioCategory[]
  orderSteps         OrderStep[]
  orderStepFeedbacks OrderStepFeedback[]

  uploaderId String?
  uploader   User?   @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  sharedWith User[] @relation("file_shared_with")

  @@index([uploaderId])
  @@index([expiresAt])
  @@map("storage_file")
}

model StorageFileDelete {
  id String @id @default(cuid())

  bucket String
  path   String

  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@unique([bucket, path])
  @@index([processedAt])
  @@map("storage_file_delete")
}

// ----------------------------------------------------------

model PortfolioCategory {
  id String @id @default(cuid())

  title            String
  description      String?
  underDescription String?
  price            String
  priceComplement  String?
  colorVariant     String

  order Int @default(autoincrement())

  mediaExampleId String?
  mediaExample   StorageFile? @relation(fields: [mediaExampleId], references: [id], onDelete: SetNull)

  items  PortfolioItem[]
  orders Order[]

  @@map("portfolio_category")
}

model PortfolioItem {
  id String @id @default(cuid())

  likesCount    Int @default(0)
  commentsCount Int @default(0)

  mediaId String?
  media   StorageFile? @relation(fields: [mediaId], references: [id], onDelete: SetNull)

  categoryId String?
  category   PortfolioCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  likes    PortfolioItemLike[]
  comments PortfolioItemComment[]

  @@map("portfolio_item")
}

model PortfolioItemLike {
  id String @id @default(cuid())

  itemId String
  item   PortfolioItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, userId])
  @@index([userId, itemId])
  @@map("portfolio_item_like")
}

enum CommentType {
  MESSAGE
  REPLY
}

model PortfolioItemComment {
  id String @id @default(cuid())

  type    CommentType
  content String

  parentId String?
  parent   PortfolioItemComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  PortfolioItemComment[] @relation("CommentReplies")

  itemId String
  item   PortfolioItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([userId])
  @@map("portfolio_item_comment")
}

enum OrderStatus {
  PENDING
  WORKING
  COMPLETED
}

model Order {
  id String @id @default(cuid())

  title       String
  description String?
  status      OrderStatus @default(PENDING)

  estimatedDeliveryDate DateTime?
  deliveryDate          DateTime?

  items OrderItem[]

  clientId String?
  client   User?   @relation("client", fields: [clientId], references: [id], onDelete: Restrict)

  workerId String?
  worker   User?   @relation("worker", fields: [workerId], references: [id], onDelete: SetNull)

  categoryId String?
  category   PortfolioCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@map("order")
}

model OrderItem {
  id String @id @default(cuid())

  title       String
  description String?

  price Int @default(0)

  steps OrderStep[]

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_item")
}

enum OrderStepType {
  NORMAL
  FINAL
}

model OrderStep {
  id String @id @default(cuid())

  description String?
  type        OrderStepType @default(NORMAL)

  feedbacks OrderStepFeedback[]

  itemId String?
  item   StorageFile? @relation(fields: [itemId], references: [id], onDelete: SetNull)

  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_step")
}

model OrderStepFeedback {
  id String @id @default(cuid())

  message String

  attachments StorageFile[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  orderStepId String
  orderStep   OrderStep @relation(fields: [orderStepId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_review")
}
